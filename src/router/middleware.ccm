module;
#include <concepts>
#include <expected>
#include <filesystem>
#include <string_view>
#include <chrono>
#include <print>
#include <tuple>
#include <rfl/json.hpp>
export module moderna.http.middleware;
import moderna.http;
import moderna.variant_error;
namespace moderna::http {
  /*
    defines an invocable that handles a request<std::string> and a path
  */
  export template <typename handler_t>
  concept router_handler_t = requires(handler_t handler) {
    {
      handler(
        std::declval<const moderna::http::request<std::string> &>(),
        std::declval<std::string_view>()
      )
    } -> std::same_as<moderna::http::response<std::string>>;
  };
  /*
    defines a middleware that handles a request<req_body_t>
  */
  export template <typename handler_t, typename req_body_t>
  concept middleware_accept_t =
    std::is_invocable_v<handler_t, const moderna::http::request<req_body_t> &>;
  /*
    defines a middleware that handles a request<req_body_t> and validates the response
  */
  export template <typename handler_t, typename req_body_t, typename resp_body_t = req_body_t>
  concept middleware_t = std::is_invocable_r_v<
    moderna::http::response<resp_body_t>,
    handler_t,
    const moderna::http::request<req_body_t> &>;

  template <router_handler_t F> struct route_handler {
    F handler;
    std::string_view sub_route;

    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &request, std::string_view route
    ) {
      return handler(request, route);
    }
  };

  /*
    router set
    a router that handles routing to multiple paths.
  */
  export template <router_handler_t... handlers_t> struct router_set {
    constexpr router_set(std::tuple<handlers_t...> handlers) : handlers{handlers} {}
    template <router_handler_t new_handler_t>
    constexpr void add_route(std::string_view route, new_handler_t handler) {
      return router_set{std::tuple_cat(handlers, {handler})};
    }
    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &request, std::string_view route
    ) {
      return __invoke_handler(request, route);
    }

  private:
    std::tuple<route_handler<handlers_t>...> handlers;

    template <size_t i = 0>
    moderna::http::response<std::string> __invoke_handler(
      const moderna::http::request<std::string> &request, std::string_view route
    ) {
      auto handler = std::get<i>(handlers);
      if (__match_path(route, handler.sub_route)) {
        return std::invoke(handler, request, route);
      } else if constexpr (i != sizeof...(handlers_t)) {
        return __invoke_handler<i + 1>(request, route);
      } else {
        return moderna::http::response<std::string>{
          status::create<status_code::HTTP_404_NOT_FOUND>(), ""
        };
      }
    }

    bool __match_path(std::string_view rec_route, std::string_view pattern) {
      return rec_route.starts_with(pattern);
    }
  };

  /*
    router
    This is the root router, plug any subsequent routers after this router.
  */
  export template <router_handler_t handler_t> struct router {
    constexpr router(handler_t handler) : handler{handler} {}

    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &request
    ) {
      auto decoded_path = request.path.decode();
      if (!decoded_path)
        return moderna::http::response<std::string>(
          status::create<status_code::HTTP_404_NOT_FOUND>(), std::string{"NOT FOUND"}
        );
      return handler(
        request, std::string_view{(decoded_path->path).begin() + 1, (decoded_path->path).end()}
      );
    }

  private:
    handler_t handler;
  };

  export struct is_a_directory_error {
    std::string_view what() const noexcept {
      return "the given path is a directory";
    }
  };

  export template <middleware_t<std::string, std::string> handler_t> struct logger_middleware {
    constexpr logger_middleware(handler_t handler) : handler{handler} {}

    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &request
    ) {
      auto beg = std::chrono::high_resolution_clock::now();
      auto resp = handler(request);
      auto end = std::chrono::high_resolution_clock::now();
      std::print(
        "{} {} {} {}ms\n",
        request.method.method_name,
        request.path.path,
        resp.status.code(),
        static_cast<float>(std::chrono::duration_cast<std::chrono::microseconds>(end - beg).count()
        ) /
          1000
      );
      return resp;
    }

  private:
    handler_t handler;
  };

  template <typename T> struct req_t {};
  template <typename T> constexpr req_t<T> req;
  export template <
    typename req_body_t,
    typename resp_body_t,
    middleware_t<req_body_t, resp_body_t> handler_t>
  struct json_middleware {
    constexpr json_middleware(
      handler_t handler, req_t<req_body_t> req_type = {}, req_t<resp_body_t> resp_type = {}
    ) :
      __handler{handler} {}

    using req_t = moderna::http::request<req_body_t>;
    using resp_t = moderna::http::response<resp_body_t>;
    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &req, std::string_view route
    ) {
      std::expected<req_t, variant_error<rfl::Error>> json_req = req.to_object<req_body_t>();
      if (!json_req)
        return moderna::http::response(
          status::create<status_code::HTTP_400_BAD_REQUEST>(), json_req.error().what()
        );
      resp_t resp = std::invoke(__handler, json_req, route);
      return resp.to_json();
    }

  private:
    handler_t __handler;
  };

  template <typename provider_t>
  concept is_get_method_provider = router_handler_t<decltype(std::declval<provider_t>().get)>;
  template <typename provider_t>
  concept is_post_method_provider = router_handler_t<decltype(std::declval<provider_t>().post)>;
  template <typename provider_t>
  concept is_put_method_provider = router_handler_t<decltype(std::declval<provider_t>().put)>;
  template <typename provider_t>
  concept is_patch_method_provider = router_handler_t<decltype(std::declval<provider_t>().patch)>;
  template <typename provider_t>
  concept is_delete_method_provider =
    router_handler_t<decltype(std::declval<provider_t>().deleter)>;
  template <typename provider_t>
  concept is_head_method_provider = router_handler_t<decltype(std::declval<provider_t>().head)>;
  template <typename provider_t>
  concept is_options_method_provider =
    router_handler_t<decltype(std::declval<provider_t>().options)>;

  /*
    Handles method branching.
  */
  export template <typename method_handler_t>
    requires(is_get_method_provider<method_handler_t> || is_post_method_provider<method_handler_t> || is_put_method_provider<method_handler_t> || is_patch_method_provider<method_handler_t> || is_delete_method_provider<method_handler_t> || is_head_method_provider<method_handler_t> || is_options_method_provider<method_handler_t>)
  struct method_middleware {
    method_middleware(method_handler_t handler) : __handler{handler} {}
    moderna::http::response<std::string> operator()(
      const moderna::http::request<std::string> &req, std::string_view route
    ) {
      if (req.method.method_name == "GET" && is_get_method_provider<method_handler_t>)
        return __handler.get(req, route);
      else if (req.method.method_name == "POST" && is_post_method_provider<method_handler_t>)
        return __handler.post(req, route);
      else if (req.method.method_name == "PUT" && is_put_method_provider<method_handler_t>)
        return __handler.put(req, route);
      else if (req.method.method_name == "PATCH" && is_patch_method_provider<method_handler_t>)
        return __handler.patch(req, route);
      else if (req.method.method_name == "DELETE" && is_delete_method_provider<method_handler_t>)
        return __handler.deleter(req, route);
      else if (req.method.method_name == "HEAD" && is_head_method_provider<method_handler_t>)
        return __handler.head(req, route);
      else if (req.method.method_name == "OPTIONS" && is_options_method_provider<method_handler_t>)
        return __handler.options(req, route);
      else
        return moderna::http::response{
          moderna::http::status::create<moderna::http::status_code::HTTP_405_METHOD_NOT_ALLOWED>(),
          std::string{""}
        };
    }

  private:
    method_handler_t __handler;
  };
}