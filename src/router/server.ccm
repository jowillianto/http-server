module;
#include <string>
#include <expected>
#include <system_error>
#include <print>
export module moderna.http.server;
import moderna.io;
import moderna.http.middleware;
import moderna.variant_error;
import moderna.http;

namespace moderna::http {
  export struct server {

    template <middleware_t<std::string, std::string> handler_t> auto accept(handler_t handler) {
      return __listener.accept()
        .transform_error([](auto &&e) {
          return e.template cast_to<moderna::http::request_parse_error_t>();
        })
        .and_then([&](auto &&acceptor) {
          return moderna::http::parse_request(acceptor.io).and_then([&](auto &&request) {
            auto resp = handler(request);
            return acceptor.io.write(std::format("{}", resp)).transform_error([](auto &&e) {
              return e.template cast_to<moderna::http::request_parse_error_t>();
            });
          });
        })
        .transform_error([](auto &&e) {
          std::print(stderr, "{}\n", e.what());
          return e;
        });
    }

    static auto create(int port, int backlog) {
      return moderna::io::listener_sock_file::create_tcp_listener(port, backlog)
        .transform([&](auto &&listener) { return server{std::move(listener)}; });
    }

  private:
    moderna::io::listener_sock_file __listener;
    server(moderna::io::listener_sock_file listener) : __listener{std::move(listener)} {}
  };
}