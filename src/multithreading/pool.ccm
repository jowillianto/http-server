module;
#include <atomic>
#include <cassert>
#include <condition_variable>
#include <memory>
#include <mutex>
#include <optional>
#include <queue>
#include <shared_mutex>
#include <thread>
#include <vector>
export module multithreading:pool;
import :task;

namespace multithreading {
  template <typename T> class PoolReceipt {
  private:
    std::shared_mutex _mut;
    std::optional<T> _value;
    friend class Pool;
    
    void _set(T value) {
      _value.emplace(value);
    }

  public:
    PoolReceipt() : _value { std::nullopt } {}
    T &get() {
      std::unique_lock l{_mut};
      return _value.value();
    }
    bool is_done() {
      std::shared_lock l{_mut};
      return _value.has_value();
    }

    /*
      Undefined behaviour if called after the process is finished
    */
    bool has_started() {
      if (_mut.try_lock_shared()) {
        _mut.unlock_shared();
        return false;
      }
      return true;
    }
  };

  template<> class PoolReceipt<void>{
    std::shared_mutex _mut;
    friend class Pool;
    void _set(void) {}
  };
  
  export class Pool {

    uint32_t _thread_count;
    std::queue<std::unique_ptr<Task> > _task_queue;
    std::mutex _task_queue_mut;
    std::vector<std::thread> _threads;
    std::condition_variable _start_cond;
    std::atomic<bool> _is_alive;

    void _thread_func();

  public:
    Pool(uint32_t thread_count);
    ~Pool();

    /*
        Adds a task into the pool
      */
    template <typename F, typename... Args>
      requires(std::invocable<F, Args...>)
    std::shared_ptr<
      PoolReceipt<decltype(std::declval<F>()(std::declval<Args>()...))>>
    add_task(F task_functor, Args &&...args);
  };
}

// Implementation
/*
  This will be continuously run in the thread.
*/
void multithreading::Pool::_thread_func() {
  /**
    As long as the pool is alive. Keep waiting and checking on the queue. 
    If the queue is not empty, extract one and run the task in the current
    thread after releasing the lock.
  */
  while (_is_alive) {
    std::unique_lock lock{_task_queue_mut};
    _start_cond.wait(lock);
    if (_task_queue.empty()) continue;
    // Access the value
    std::unique_ptr<Task> task = std::move(_task_queue.front());
    _task_queue.pop();
    // Release the lock after removal
    lock.unlock();
    // Run the task
    task -> invoke();
  }
}

multithreading::Pool::Pool(uint32_t thread_count) {
  assert(thread_count != 0);
  _thread_count = thread_count;
  _threads.reserve(_thread_count);
  _is_alive = true;

  // Create the threads
  for (uint32_t i = 0; i < _thread_count; i += 1) {
    _threads.emplace_back(&multithreading::Pool::_thread_func, this);
  }
}
multithreading::Pool::~Pool() {
  // Critical Section, Empty Queue
  std::unique_lock l{_task_queue_mut};
  std::queue<std::unique_ptr<Task> > empty_queue;
  _task_queue.swap(empty_queue);
  l.unlock();
  
  // Kill all threads safely.
  _is_alive = false;
  _start_cond.notify_all();
  for (auto& thread : _threads)
    thread.join();
}

template<typename F, typename ...Args> requires (std::invocable<F, Args...>)
std::shared_ptr<multithreading::PoolReceipt<
  decltype(std::declval<F>()(std::declval<Args>()...))
> > multithreading::Pool::add_task(F task_functor, Args&& ...args) {
  using ReturnType = decltype(std::declval<F>()(std::declval<Args>()...));
  using Receipt = multithreading::PoolReceipt<ReturnType>;
  auto receipt = std::make_shared<Receipt>();
  // Lock the queue
  std::unique_lock l{_task_queue_mut};
  _task_queue.emplace(new ParametrizedTask{
    [](std::shared_ptr<Receipt> receipt, F task_functor, Args ...args){
      std::unique_lock l{receipt->_mut};
      if constexpr (std::is_same_v<ReturnType, void>)
        task_functor(std::move(args)...);
      else
        receipt -> _set(task_functor(std::move<Args>(args)...));
    },
    receipt, 
    task_functor, 
    std::forward<Args>(args)...
  });
  _start_cond.notify_one();
  return receipt;
}