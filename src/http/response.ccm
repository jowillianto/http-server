module;
#include <format>
export module moderna.http:response;
import :status;
import :header;
namespace moderna::http {
  export struct response {
    status status;
    header header;
    std::string data;

    response(
      moderna::http::status http_status, moderna::http::header http_header, std::string data
    ) :
      status{std::move(http_status)},
      header{std::move(http_header)}, data{std::move(data)} {
      static_cast<void>(header.add_or_modify(
        header_view_no_content{"Content-Length"}.set_content(std::to_string((this->data).length()))
      ));
    }
  };
};

template <> struct std::formatter<moderna::http::response> {
  constexpr auto parse(std::format_parse_context &ctx) {
    return ctx.begin();
  }
  template <typename format_context>
  auto format(const moderna::http::response &response, format_context &ctx) const {
    std::format_to(
      ctx.out(),
      "HTTP/1.1 {} {}\r\n{}\r\n{}",
      response.status.code(),
      response.status.msg(),
      response.header,
      response.data
    );
    return ctx.out();
  }
};