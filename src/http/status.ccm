module;
#include <expected>
#include <string>
#include <string_view>
#include <format>
export module http:status;
import :error;
import :parse_util;

namespace http {
  export enum StatusCode {
    HTTP_100_CONTINUE = 100,
    HTTP_101_SWITCHING_PROTOCOLS = 101,
    HTTP_102_PROCESSING = 102,
    HTTP_103_EARLY_HINTS = 103,
    HTTP_200_OK = 200,
    HTTP_201_CREATED = 201,
    HTTP_202_ACCEPTED = 202,
    HTTP_203_NON_AUTHORITATIVE_INFORMATION = 203,
    HTTP_204_NO_CONTENT = 204,
    HTTP_205_RESET_CONTENT = 205,
    HTTP_206_PARTIAL_CONTENT = 206,
    HTTP_207_MULTI_STATUS = 207,
    HTTP_208_ALREADY_REPORTED = 208,
    HTTP_226_IM_USED = 226,
    HTTP_300_MULTIPLE_CHOICES = 300,
    HTTP_301_MOVED_PERMANENTLY = 301,
    HTTP_302_FOUND = 302,
    HTTP_303_SEE_OTHER = 303,
    HTTP_304_NOT_MODIFIED = 304,
    HTTP_305_USE_PROXY = 305,
    HTTP_307_TEMPORARY_REDIRECT = 307,
    HTTP_308_PERMANENT_REDIRECT = 308,
    HTTP_400_BAD_REQUEST = 400,
    HTTP_401_UNAUTHORIZED = 401,
    HTTP_402_PAYMENT_REQUIRED = 402,
    HTTP_403_FORBIDDEN = 403,
    HTTP_404_NOT_FOUND = 404,
    HTTP_405_METHOD_NOT_ALLOWED = 405,
    HTTP_406_NOT_ACCEPTABLE = 406,
    HTTP_407_PROXY_AUTHENTICATION_REQUIRED = 407,
    HTTP_408_REQUEST_TIMEOUT = 408,
    HTTP_409_CONFLICT = 409,
    HTTP_410_GONE = 410,
    HTTP_411_LENGTH_REQUIRED = 411,
    HTTP_412_PRECONDITION_FAILED = 412,
    HTTP_413_PAYLOAD_TOO_LARGE = 413,
    HTTP_414_URI_TOO_LONG = 414,
    HTTP_415_UNSUPPORTED_MEDIA_TYPE = 415,
    HTTP_416_RANGE_NOT_SATISFIABLE = 416,
    HTTP_417_EXPECTATION_FAILED = 417,
    HTTP_421_MISDIRECTED_REQUEST = 421,
    HTTP_422_UNPROCESSABLE_ENTITY = 422,
    HTTP_423_LOCKED = 423,
    HTTP_424_FAILED_DEPENDENCY = 424,
    HTTP_500_INTERNAL_SERVER_ERROR = 500,
    HTTP_501_NOT_IMPLEMENTED = 501,
    HTTP_502_BAD_GATEWAY = 502,
    HTTP_503_SERVICE_UNAVAILABLE = 503,
    HTTP_504_GATEWAY_TIMEOUT = 504,
    HTTP_505_HTTP_VERSION_NOT_SUPPORTED = 505,
    HTTP_506_VARIANT_ALSO_NEGOTIATES = 506,
    HTTP_507_INSUFFICIENT_STORAGE = 507,
    HTTP_508_LOOP_DETECTED = 508,
    HTTP_510_NOT_EXTENDED = 510,
    HTTP_511_NETWORK_AUTHENTICATION_REQUIRED = 511
  };
  export enum StatusCodeClass {
    INFORMATIONAL_RESPONSE,
    SUCCESSFUL,
    REDIRECTION,
    CLIENT_ERROR,
    SERVER_ERROR
  };

  /*
    A structure representing the HTTP Status System.
  */
  export struct Status {
    /*
      Initializes http status from a status code and status msg. If you are initializing using a
      commonly used HTTP Status Code, use Status::create_common instead of this constructor
    */
    Status(uint32_t status_code, std::string status_msg) noexcept;

    // Returns the code for the current status
    uint32_t code() const noexcept;
    // Returns the message contained for the current status
    const std::string &msg() const noexcept;
    // Return the class of the code for the current status.
    StatusCodeClass code_class() const noexcept;

    /*
      Sets the code for the current HTTP status. This function will also set code_class accordingly.
      To change the status code to a commonly used status code. Call this function with a template
      argument instead.
    */
    void change_code(uint32_t new_code, std::string msg) noexcept;
    /*
      Sets the code for the current HTTP status and changing the message automatically.
    */
    template <StatusCode code> void change_code() noexcept;

    /*
      Creates a status object for a commonly used HTTP code. This includes codes such as 200 OK.
      Example :
      auto status = Status::create<HTTP_200_OK>();
      status.code(); // this is 200;
      status.msg(); // this is "OK";
      status.code_class(); // this is http::StatusCodeClass::SUCCESSFUL
    */
    template <StatusCode code> static Status create() noexcept;
    /*
      Creates a Status object from a status string. This function will not throw the parse error
      usually thrown when a parse error happens.
      Example :
      auto status = Status::from_string("200 OK");
      status.code(); // this is 200
      status.msg(); // this is "OK"
      status.code_class(); // this is http::StatusCodeClass::SUCCESSFUL
    */
    static std::expected<const Status, ParseError> from_string(std::string_view view) noexcept;

  private:
    uint32_t _code;
    StatusCodeClass _code_class;
    std::string _msg;
    void _classify_code();
  };
}

template <> struct std::formatter<http::Status> {
  constexpr auto parse(std::format_parse_context &ctx){
    return ctx.begin();
  }
  template<class FormatContext>
  auto format(const http::Status &obj, FormatContext &ctx) const {
    return std::format_to(ctx.out(), "{} {}", obj.code(), obj.msg());
  }
};