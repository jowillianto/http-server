module;
#include <chrono>
#include <optional>
#include <exception>
#include <expected>

export module timer;

namespace timer {
  export struct TimerError : public std::exception {
    TimerError( const char* msg ) : _msg(msg){}
    const char* what() {
      return _msg;
    }
    private:
      const char* _msg;
  };

  export template <
    class clock = std::chrono::system_clock,
    typename duration = std::chrono::milliseconds
  >
  struct Timer {
  public:
    /*
      Starts the timer. If the timer has already started, nothing will be done. Hence, start the
      timer only once. 
    */
    void start(){
      _start = clock::now();
    }
    /*
      Ends the timer and returns the time. If the timer has not been started, an error will be returned. 
      Otherwise, this will return the duration. 
    */
    std::expected<duration, TimerError> end() {
      if (!_start.has_value())
        return std::unexpected { TimerError {"Timer has not started"} };
      _end = clock::now();
      _dur = _start.value() - _end.value();
      return _dur.value();
    }
    bool has_begun() const {
      return _start.has_value();
    }
    bool has_ended() const {
      return _end.has_value();
    }
    const std::optional<std::chrono::time_point<clock> >& start_time() const {
      return _start;
    }
    const std::optional<std::chrono::time_point<clock> >& end_time() const {
      return _end;
    }
    const std::optional<duration>& dur() const {
      return _dur;
    }
  private:
    std::optional<std::chrono::time_point<clock, duration> > _start;
    std::optional<std::chrono::time_point<clock, duration> > _end;
    std::optional<duration> _dur;
  };
}